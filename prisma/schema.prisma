generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../src/server/graphql"
  formatGeneratedCode = "prettier"
}

generator PrismaTypeGraphQLTypesGenerator {
  provider     = "npx prisma-typegraphql-types-generator"
  enumsOutput  = "./src/types/enums"
  modelsOutput = "./src/models"
  useYarn      = "true"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PostUser {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Staff {
  id            Int            @id @default(autoincrement())
  StaffName     String
  AgentName     String
  StaffCategory String
  Department    String
  PostUnit      String
  ManagerName   String
  ManagerTitle  String
  ManagerEmail  String
  userId        String
  leaveRequests LeaveRequest[]
  user          User           @relation(fields: [userId], references: [id])
  staffFiles    staffFiles[]
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  staff         Staff[]
  staffId       Int?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    PostUser @relation(fields: [authorId], references: [id])
}

model CalendarMaster {
  CalendarDate DateTime @id
  WeekDayName  String?
  Year         Int
  Month        Int
}

model PublicHoliday {
  StartDate DateTime @id
  EndDate   DateTime
  Summary   String?
}

model CalendarVacation {
  id             Int      @id @unique @default(autoincrement())
  VacationDate   DateTime
  ChargeableDay  Decimal
  LeaveRequestId Int

  leaveRequest LeaveRequest @relation(fields: [LeaveRequestId], references: [id], onDelete: Cascade)
}

model TimeSheet {
  id                  Int                 @id @unique @default(autoincrement())
  StartDate           DateTime
  EndDate             DateTime
  TSCalendarID        Int
  TimeSheetFileName   String?
  TotalChargeableDay  Decimal             @default(0)
  TotalChargeableHour Decimal             @default(0)
  TotalOTHour         Decimal
  calendar            TimeSheetCalendar[]
}

model LeaveRequest {
  id               Int                @id @default(autoincrement())
  leavePeriodStart DateTime
  AMPMStart        String
  leavePeriodEnd   DateTime?
  AMPMEnd          String?
  leaveDays        Float
  dateOfReturn     DateTime
  staffSignDate    DateTime
  fileId           Int
  staffId          Int
  calendarVacation CalendarVacation[]
  staff            Staff              @relation(fields: [staffId], references: [id])
  staffFile        staffFiles         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  leavePurpose     String?
  leaveType        String
}

model staffFiles {
  id           Int            @id @default(autoincrement())
  filePath     String
  fileType     String
  staffId      Int
  LeaveRequest LeaveRequest[]
  staff        Staff          @relation(fields: [staffId], references: [id])
}

model TimeSheetCalendar {
  id             Int       @id @default(autoincrement())
  DayID          Int
  CalendarDate   DateTime
  TimeSheetID    Int
  ChargeableDay  Decimal
  ChargeableHour Decimal
  Training       Decimal   @default(0)
  Vacation       Decimal   @default(0)
  PublicHoliday  Decimal   @default(0)
  WeekEnd        Decimal   @default(0)
  Others         Decimal   @default(0)
  timesheet      TimeSheet @relation(fields: [TimeSheetID], references: [id])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view viewCalendarTimeSheet {
  CalendarDate           DateTime @id
  CalendarDateStr        String?
  WeekDayName            String?
  Year                   Int?
  Month                  Int?
  VacationChargable      Decimal?
  PublicHolidayChargable Decimal?
  HolidaySummary         String?
  LeaveRequestId         Int?
  staffId                Int?
}
