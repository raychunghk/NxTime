import { ClassType } from 'type-graphql';
import * as tslib from 'tslib';
import * as crudResolvers from './resolvers/crud/resolvers-crud.index';
import * as argsTypes from './resolvers/crud/args.index';
import * as actionResolvers from './resolvers/crud/resolvers-actions.index';
import * as relationResolvers from './resolvers/relations/resolvers.index';
import * as models from './models';
import * as outputTypes from './resolvers/outputs';
import * as inputTypes from './resolvers/inputs';

export type MethodDecoratorOverrideFn = (
  decorators: MethodDecorator[],
) => MethodDecorator[];

const crudResolversMap = {
  PostUser: crudResolvers.PostUserCrudResolver,
  Account: crudResolvers.AccountCrudResolver,
  Session: crudResolvers.SessionCrudResolver,
  User: crudResolvers.UserCrudResolver,
  VerificationRequest: crudResolvers.VerificationRequestCrudResolver,
  Staff: crudResolvers.StaffCrudResolver,
  Post: crudResolvers.PostCrudResolver,
  CalendarMaster: crudResolvers.CalendarMasterCrudResolver,
  UserVacation: crudResolvers.UserVacationCrudResolver,
  Holiday: crudResolvers.HolidayCrudResolver,
  TimeSheet: crudResolvers.TimeSheetCrudResolver,
  LeaveRequest: crudResolvers.LeaveRequestCrudResolver,
  TimeSheetCalendar: crudResolvers.TimeSheetCalendarCrudResolver,
};
const actionResolversMap = {
  PostUser: {
    aggregatePostUser: actionResolvers.AggregatePostUserResolver,
    createOnePostUser: actionResolvers.CreateOnePostUserResolver,
    deleteManyPostUser: actionResolvers.DeleteManyPostUserResolver,
    deleteOnePostUser: actionResolvers.DeleteOnePostUserResolver,
    findFirstPostUser: actionResolvers.FindFirstPostUserResolver,
    findFirstPostUserOrThrow: actionResolvers.FindFirstPostUserOrThrowResolver,
    postUsers: actionResolvers.FindManyPostUserResolver,
    postUser: actionResolvers.FindUniquePostUserResolver,
    getPostUser: actionResolvers.FindUniquePostUserOrThrowResolver,
    groupByPostUser: actionResolvers.GroupByPostUserResolver,
    updateManyPostUser: actionResolvers.UpdateManyPostUserResolver,
    updateOnePostUser: actionResolvers.UpdateOnePostUserResolver,
    upsertOnePostUser: actionResolvers.UpsertOnePostUserResolver,
  },
  Account: {
    aggregateAccount: actionResolvers.AggregateAccountResolver,
    createOneAccount: actionResolvers.CreateOneAccountResolver,
    deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
    deleteOneAccount: actionResolvers.DeleteOneAccountResolver,
    findFirstAccount: actionResolvers.FindFirstAccountResolver,
    findFirstAccountOrThrow: actionResolvers.FindFirstAccountOrThrowResolver,
    accounts: actionResolvers.FindManyAccountResolver,
    account: actionResolvers.FindUniqueAccountResolver,
    getAccount: actionResolvers.FindUniqueAccountOrThrowResolver,
    groupByAccount: actionResolvers.GroupByAccountResolver,
    updateManyAccount: actionResolvers.UpdateManyAccountResolver,
    updateOneAccount: actionResolvers.UpdateOneAccountResolver,
    upsertOneAccount: actionResolvers.UpsertOneAccountResolver,
  },
  Session: {
    aggregateSession: actionResolvers.AggregateSessionResolver,
    createOneSession: actionResolvers.CreateOneSessionResolver,
    deleteManySession: actionResolvers.DeleteManySessionResolver,
    deleteOneSession: actionResolvers.DeleteOneSessionResolver,
    findFirstSession: actionResolvers.FindFirstSessionResolver,
    findFirstSessionOrThrow: actionResolvers.FindFirstSessionOrThrowResolver,
    sessions: actionResolvers.FindManySessionResolver,
    session: actionResolvers.FindUniqueSessionResolver,
    getSession: actionResolvers.FindUniqueSessionOrThrowResolver,
    groupBySession: actionResolvers.GroupBySessionResolver,
    updateManySession: actionResolvers.UpdateManySessionResolver,
    updateOneSession: actionResolvers.UpdateOneSessionResolver,
    upsertOneSession: actionResolvers.UpsertOneSessionResolver,
  },
  User: {
    aggregateUser: actionResolvers.AggregateUserResolver,
    createOneUser: actionResolvers.CreateOneUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    deleteOneUser: actionResolvers.DeleteOneUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
    users: actionResolvers.FindManyUserResolver,
    user: actionResolvers.FindUniqueUserResolver,
    getUser: actionResolvers.FindUniqueUserOrThrowResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    updateOneUser: actionResolvers.UpdateOneUserResolver,
    upsertOneUser: actionResolvers.UpsertOneUserResolver,
  },
  VerificationRequest: {
    aggregateVerificationRequest:
      actionResolvers.AggregateVerificationRequestResolver,
    createOneVerificationRequest:
      actionResolvers.CreateOneVerificationRequestResolver,
    deleteManyVerificationRequest:
      actionResolvers.DeleteManyVerificationRequestResolver,
    deleteOneVerificationRequest:
      actionResolvers.DeleteOneVerificationRequestResolver,
    findFirstVerificationRequest:
      actionResolvers.FindFirstVerificationRequestResolver,
    findFirstVerificationRequestOrThrow:
      actionResolvers.FindFirstVerificationRequestOrThrowResolver,
    verificationRequests: actionResolvers.FindManyVerificationRequestResolver,
    verificationRequest: actionResolvers.FindUniqueVerificationRequestResolver,
    getVerificationRequest:
      actionResolvers.FindUniqueVerificationRequestOrThrowResolver,
    groupByVerificationRequest:
      actionResolvers.GroupByVerificationRequestResolver,
    updateManyVerificationRequest:
      actionResolvers.UpdateManyVerificationRequestResolver,
    updateOneVerificationRequest:
      actionResolvers.UpdateOneVerificationRequestResolver,
    upsertOneVerificationRequest:
      actionResolvers.UpsertOneVerificationRequestResolver,
  },
  Staff: {
    aggregateStaff: actionResolvers.AggregateStaffResolver,
    createOneStaff: actionResolvers.CreateOneStaffResolver,
    deleteManyStaff: actionResolvers.DeleteManyStaffResolver,
    deleteOneStaff: actionResolvers.DeleteOneStaffResolver,
    findFirstStaff: actionResolvers.FindFirstStaffResolver,
    findFirstStaffOrThrow: actionResolvers.FindFirstStaffOrThrowResolver,
    findManyStaff: actionResolvers.FindManyStaffResolver,
    findUniqueStaff: actionResolvers.FindUniqueStaffResolver,
    findUniqueStaffOrThrow: actionResolvers.FindUniqueStaffOrThrowResolver,
    groupByStaff: actionResolvers.GroupByStaffResolver,
    updateManyStaff: actionResolvers.UpdateManyStaffResolver,
    updateOneStaff: actionResolvers.UpdateOneStaffResolver,
    upsertOneStaff: actionResolvers.UpsertOneStaffResolver,
  },
  Post: {
    aggregatePost: actionResolvers.AggregatePostResolver,
    createOnePost: actionResolvers.CreateOnePostResolver,
    deleteManyPost: actionResolvers.DeleteManyPostResolver,
    deleteOnePost: actionResolvers.DeleteOnePostResolver,
    findFirstPost: actionResolvers.FindFirstPostResolver,
    findFirstPostOrThrow: actionResolvers.FindFirstPostOrThrowResolver,
    posts: actionResolvers.FindManyPostResolver,
    post: actionResolvers.FindUniquePostResolver,
    getPost: actionResolvers.FindUniquePostOrThrowResolver,
    groupByPost: actionResolvers.GroupByPostResolver,
    updateManyPost: actionResolvers.UpdateManyPostResolver,
    updateOnePost: actionResolvers.UpdateOnePostResolver,
    upsertOnePost: actionResolvers.UpsertOnePostResolver,
  },
  CalendarMaster: {
    aggregateCalendarMaster: actionResolvers.AggregateCalendarMasterResolver,
    createOneCalendarMaster: actionResolvers.CreateOneCalendarMasterResolver,
    deleteManyCalendarMaster: actionResolvers.DeleteManyCalendarMasterResolver,
    deleteOneCalendarMaster: actionResolvers.DeleteOneCalendarMasterResolver,
    findFirstCalendarMaster: actionResolvers.FindFirstCalendarMasterResolver,
    findFirstCalendarMasterOrThrow:
      actionResolvers.FindFirstCalendarMasterOrThrowResolver,
    calendarMasters: actionResolvers.FindManyCalendarMasterResolver,
    calendarMaster: actionResolvers.FindUniqueCalendarMasterResolver,
    getCalendarMaster: actionResolvers.FindUniqueCalendarMasterOrThrowResolver,
    groupByCalendarMaster: actionResolvers.GroupByCalendarMasterResolver,
    updateManyCalendarMaster: actionResolvers.UpdateManyCalendarMasterResolver,
    updateOneCalendarMaster: actionResolvers.UpdateOneCalendarMasterResolver,
    upsertOneCalendarMaster: actionResolvers.UpsertOneCalendarMasterResolver,
  },
  UserVacation: {
    aggregateUserVacation: actionResolvers.AggregateUserVacationResolver,
    createOneUserVacation: actionResolvers.CreateOneUserVacationResolver,
    deleteManyUserVacation: actionResolvers.DeleteManyUserVacationResolver,
    deleteOneUserVacation: actionResolvers.DeleteOneUserVacationResolver,
    findFirstUserVacation: actionResolvers.FindFirstUserVacationResolver,
    findFirstUserVacationOrThrow:
      actionResolvers.FindFirstUserVacationOrThrowResolver,
    userVacations: actionResolvers.FindManyUserVacationResolver,
    userVacation: actionResolvers.FindUniqueUserVacationResolver,
    getUserVacation: actionResolvers.FindUniqueUserVacationOrThrowResolver,
    groupByUserVacation: actionResolvers.GroupByUserVacationResolver,
    updateManyUserVacation: actionResolvers.UpdateManyUserVacationResolver,
    updateOneUserVacation: actionResolvers.UpdateOneUserVacationResolver,
    upsertOneUserVacation: actionResolvers.UpsertOneUserVacationResolver,
  },
  Holiday: {
    aggregateHoliday: actionResolvers.AggregateHolidayResolver,
    createOneHoliday: actionResolvers.CreateOneHolidayResolver,
    deleteManyHoliday: actionResolvers.DeleteManyHolidayResolver,
    deleteOneHoliday: actionResolvers.DeleteOneHolidayResolver,
    findFirstHoliday: actionResolvers.FindFirstHolidayResolver,
    findFirstHolidayOrThrow: actionResolvers.FindFirstHolidayOrThrowResolver,
    holidays: actionResolvers.FindManyHolidayResolver,
    holiday: actionResolvers.FindUniqueHolidayResolver,
    getHoliday: actionResolvers.FindUniqueHolidayOrThrowResolver,
    groupByHoliday: actionResolvers.GroupByHolidayResolver,
    updateManyHoliday: actionResolvers.UpdateManyHolidayResolver,
    updateOneHoliday: actionResolvers.UpdateOneHolidayResolver,
    upsertOneHoliday: actionResolvers.UpsertOneHolidayResolver,
  },
  TimeSheet: {
    aggregateTimeSheet: actionResolvers.AggregateTimeSheetResolver,
    createOneTimeSheet: actionResolvers.CreateOneTimeSheetResolver,
    deleteManyTimeSheet: actionResolvers.DeleteManyTimeSheetResolver,
    deleteOneTimeSheet: actionResolvers.DeleteOneTimeSheetResolver,
    findFirstTimeSheet: actionResolvers.FindFirstTimeSheetResolver,
    findFirstTimeSheetOrThrow:
      actionResolvers.FindFirstTimeSheetOrThrowResolver,
    timeSheets: actionResolvers.FindManyTimeSheetResolver,
    timeSheet: actionResolvers.FindUniqueTimeSheetResolver,
    getTimeSheet: actionResolvers.FindUniqueTimeSheetOrThrowResolver,
    groupByTimeSheet: actionResolvers.GroupByTimeSheetResolver,
    updateManyTimeSheet: actionResolvers.UpdateManyTimeSheetResolver,
    updateOneTimeSheet: actionResolvers.UpdateOneTimeSheetResolver,
    upsertOneTimeSheet: actionResolvers.UpsertOneTimeSheetResolver,
  },
  LeaveRequest: {
    aggregateLeaveRequest: actionResolvers.AggregateLeaveRequestResolver,
    createOneLeaveRequest: actionResolvers.CreateOneLeaveRequestResolver,
    deleteManyLeaveRequest: actionResolvers.DeleteManyLeaveRequestResolver,
    deleteOneLeaveRequest: actionResolvers.DeleteOneLeaveRequestResolver,
    findFirstLeaveRequest: actionResolvers.FindFirstLeaveRequestResolver,
    findFirstLeaveRequestOrThrow:
      actionResolvers.FindFirstLeaveRequestOrThrowResolver,
    leaveRequests: actionResolvers.FindManyLeaveRequestResolver,
    leaveRequest: actionResolvers.FindUniqueLeaveRequestResolver,
    getLeaveRequest: actionResolvers.FindUniqueLeaveRequestOrThrowResolver,
    groupByLeaveRequest: actionResolvers.GroupByLeaveRequestResolver,
    updateManyLeaveRequest: actionResolvers.UpdateManyLeaveRequestResolver,
    updateOneLeaveRequest: actionResolvers.UpdateOneLeaveRequestResolver,
    upsertOneLeaveRequest: actionResolvers.UpsertOneLeaveRequestResolver,
  },
  TimeSheetCalendar: {
    aggregateTimeSheetCalendar:
      actionResolvers.AggregateTimeSheetCalendarResolver,
    createOneTimeSheetCalendar:
      actionResolvers.CreateOneTimeSheetCalendarResolver,
    deleteManyTimeSheetCalendar:
      actionResolvers.DeleteManyTimeSheetCalendarResolver,
    deleteOneTimeSheetCalendar:
      actionResolvers.DeleteOneTimeSheetCalendarResolver,
    findFirstTimeSheetCalendar:
      actionResolvers.FindFirstTimeSheetCalendarResolver,
    findFirstTimeSheetCalendarOrThrow:
      actionResolvers.FindFirstTimeSheetCalendarOrThrowResolver,
    timeSheetCalendars: actionResolvers.FindManyTimeSheetCalendarResolver,
    timeSheetCalendar: actionResolvers.FindUniqueTimeSheetCalendarResolver,
    getTimeSheetCalendar:
      actionResolvers.FindUniqueTimeSheetCalendarOrThrowResolver,
    groupByTimeSheetCalendar: actionResolvers.GroupByTimeSheetCalendarResolver,
    updateManyTimeSheetCalendar:
      actionResolvers.UpdateManyTimeSheetCalendarResolver,
    updateOneTimeSheetCalendar:
      actionResolvers.UpdateOneTimeSheetCalendarResolver,
    upsertOneTimeSheetCalendar:
      actionResolvers.UpsertOneTimeSheetCalendarResolver,
  },
};
const crudResolversInfo = {
  PostUser: [
    'aggregatePostUser',
    'createOnePostUser',
    'deleteManyPostUser',
    'deleteOnePostUser',
    'findFirstPostUser',
    'findFirstPostUserOrThrow',
    'postUsers',
    'postUser',
    'getPostUser',
    'groupByPostUser',
    'updateManyPostUser',
    'updateOnePostUser',
    'upsertOnePostUser',
  ],
  Account: [
    'aggregateAccount',
    'createOneAccount',
    'deleteManyAccount',
    'deleteOneAccount',
    'findFirstAccount',
    'findFirstAccountOrThrow',
    'accounts',
    'account',
    'getAccount',
    'groupByAccount',
    'updateManyAccount',
    'updateOneAccount',
    'upsertOneAccount',
  ],
  Session: [
    'aggregateSession',
    'createOneSession',
    'deleteManySession',
    'deleteOneSession',
    'findFirstSession',
    'findFirstSessionOrThrow',
    'sessions',
    'session',
    'getSession',
    'groupBySession',
    'updateManySession',
    'updateOneSession',
    'upsertOneSession',
  ],
  User: [
    'aggregateUser',
    'createOneUser',
    'deleteManyUser',
    'deleteOneUser',
    'findFirstUser',
    'findFirstUserOrThrow',
    'users',
    'user',
    'getUser',
    'groupByUser',
    'updateManyUser',
    'updateOneUser',
    'upsertOneUser',
  ],
  VerificationRequest: [
    'aggregateVerificationRequest',
    'createOneVerificationRequest',
    'deleteManyVerificationRequest',
    'deleteOneVerificationRequest',
    'findFirstVerificationRequest',
    'findFirstVerificationRequestOrThrow',
    'verificationRequests',
    'verificationRequest',
    'getVerificationRequest',
    'groupByVerificationRequest',
    'updateManyVerificationRequest',
    'updateOneVerificationRequest',
    'upsertOneVerificationRequest',
  ],
  Staff: [
    'aggregateStaff',
    'createOneStaff',
    'deleteManyStaff',
    'deleteOneStaff',
    'findFirstStaff',
    'findFirstStaffOrThrow',
    'findManyStaff',
    'findUniqueStaff',
    'findUniqueStaffOrThrow',
    'groupByStaff',
    'updateManyStaff',
    'updateOneStaff',
    'upsertOneStaff',
  ],
  Post: [
    'aggregatePost',
    'createOnePost',
    'deleteManyPost',
    'deleteOnePost',
    'findFirstPost',
    'findFirstPostOrThrow',
    'posts',
    'post',
    'getPost',
    'groupByPost',
    'updateManyPost',
    'updateOnePost',
    'upsertOnePost',
  ],
  CalendarMaster: [
    'aggregateCalendarMaster',
    'createOneCalendarMaster',
    'deleteManyCalendarMaster',
    'deleteOneCalendarMaster',
    'findFirstCalendarMaster',
    'findFirstCalendarMasterOrThrow',
    'calendarMasters',
    'calendarMaster',
    'getCalendarMaster',
    'groupByCalendarMaster',
    'updateManyCalendarMaster',
    'updateOneCalendarMaster',
    'upsertOneCalendarMaster',
  ],
  UserVacation: [
    'aggregateUserVacation',
    'createOneUserVacation',
    'deleteManyUserVacation',
    'deleteOneUserVacation',
    'findFirstUserVacation',
    'findFirstUserVacationOrThrow',
    'userVacations',
    'userVacation',
    'getUserVacation',
    'groupByUserVacation',
    'updateManyUserVacation',
    'updateOneUserVacation',
    'upsertOneUserVacation',
  ],
  Holiday: [
    'aggregateHoliday',
    'createOneHoliday',
    'deleteManyHoliday',
    'deleteOneHoliday',
    'findFirstHoliday',
    'findFirstHolidayOrThrow',
    'holidays',
    'holiday',
    'getHoliday',
    'groupByHoliday',
    'updateManyHoliday',
    'updateOneHoliday',
    'upsertOneHoliday',
  ],
  TimeSheet: [
    'aggregateTimeSheet',
    'createOneTimeSheet',
    'deleteManyTimeSheet',
    'deleteOneTimeSheet',
    'findFirstTimeSheet',
    'findFirstTimeSheetOrThrow',
    'timeSheets',
    'timeSheet',
    'getTimeSheet',
    'groupByTimeSheet',
    'updateManyTimeSheet',
    'updateOneTimeSheet',
    'upsertOneTimeSheet',
  ],
  LeaveRequest: [
    'aggregateLeaveRequest',
    'createOneLeaveRequest',
    'deleteManyLeaveRequest',
    'deleteOneLeaveRequest',
    'findFirstLeaveRequest',
    'findFirstLeaveRequestOrThrow',
    'leaveRequests',
    'leaveRequest',
    'getLeaveRequest',
    'groupByLeaveRequest',
    'updateManyLeaveRequest',
    'updateOneLeaveRequest',
    'upsertOneLeaveRequest',
  ],
  TimeSheetCalendar: [
    'aggregateTimeSheetCalendar',
    'createOneTimeSheetCalendar',
    'deleteManyTimeSheetCalendar',
    'deleteOneTimeSheetCalendar',
    'findFirstTimeSheetCalendar',
    'findFirstTimeSheetCalendarOrThrow',
    'timeSheetCalendars',
    'timeSheetCalendar',
    'getTimeSheetCalendar',
    'groupByTimeSheetCalendar',
    'updateManyTimeSheetCalendar',
    'updateOneTimeSheetCalendar',
    'upsertOneTimeSheetCalendar',
  ],
};
const argsInfo = {
  AggregatePostUserArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOnePostUserArgs: ['data'],
  DeleteManyPostUserArgs: ['where'],
  DeleteOnePostUserArgs: ['where'],
  FindFirstPostUserArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstPostUserOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyPostUserArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniquePostUserArgs: ['where'],
  FindUniquePostUserOrThrowArgs: ['where'],
  GroupByPostUserArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyPostUserArgs: ['data', 'where'],
  UpdateOnePostUserArgs: ['data', 'where'],
  UpsertOnePostUserArgs: ['where', 'create', 'update'],
  AggregateAccountArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneAccountArgs: ['data'],
  DeleteManyAccountArgs: ['where'],
  DeleteOneAccountArgs: ['where'],
  FindFirstAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstAccountOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueAccountArgs: ['where'],
  FindUniqueAccountOrThrowArgs: ['where'],
  GroupByAccountArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyAccountArgs: ['data', 'where'],
  UpdateOneAccountArgs: ['data', 'where'],
  UpsertOneAccountArgs: ['where', 'create', 'update'],
  AggregateSessionArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneSessionArgs: ['data'],
  DeleteManySessionArgs: ['where'],
  DeleteOneSessionArgs: ['where'],
  FindFirstSessionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstSessionOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySessionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueSessionArgs: ['where'],
  FindUniqueSessionOrThrowArgs: ['where'],
  GroupBySessionArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManySessionArgs: ['data', 'where'],
  UpdateOneSessionArgs: ['data', 'where'],
  UpsertOneSessionArgs: ['where', 'create', 'update'],
  AggregateUserArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneUserArgs: ['data'],
  DeleteManyUserArgs: ['where'],
  DeleteOneUserArgs: ['where'],
  FindFirstUserArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindFirstUserOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyUserArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindUniqueUserArgs: ['where'],
  FindUniqueUserOrThrowArgs: ['where'],
  GroupByUserArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyUserArgs: ['data', 'where'],
  UpdateOneUserArgs: ['data', 'where'],
  UpsertOneUserArgs: ['where', 'create', 'update'],
  AggregateVerificationRequestArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  CreateOneVerificationRequestArgs: ['data'],
  DeleteManyVerificationRequestArgs: ['where'],
  DeleteOneVerificationRequestArgs: ['where'],
  FindFirstVerificationRequestArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstVerificationRequestOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyVerificationRequestArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueVerificationRequestArgs: ['where'],
  FindUniqueVerificationRequestOrThrowArgs: ['where'],
  GroupByVerificationRequestArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  UpdateManyVerificationRequestArgs: ['data', 'where'],
  UpdateOneVerificationRequestArgs: ['data', 'where'],
  UpsertOneVerificationRequestArgs: ['where', 'create', 'update'],
  AggregateStaffArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneStaffArgs: ['data'],
  DeleteManyStaffArgs: ['where'],
  DeleteOneStaffArgs: ['where'],
  FindFirstStaffArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstStaffOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyStaffArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindUniqueStaffArgs: ['where'],
  FindUniqueStaffOrThrowArgs: ['where'],
  GroupByStaffArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyStaffArgs: ['data', 'where'],
  UpdateOneStaffArgs: ['data', 'where'],
  UpsertOneStaffArgs: ['where', 'create', 'update'],
  AggregatePostArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOnePostArgs: ['data'],
  DeleteManyPostArgs: ['where'],
  DeleteOnePostArgs: ['where'],
  FindFirstPostArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindFirstPostOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyPostArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindUniquePostArgs: ['where'],
  FindUniquePostOrThrowArgs: ['where'],
  GroupByPostArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyPostArgs: ['data', 'where'],
  UpdateOnePostArgs: ['data', 'where'],
  UpsertOnePostArgs: ['where', 'create', 'update'],
  AggregateCalendarMasterArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneCalendarMasterArgs: ['data'],
  DeleteManyCalendarMasterArgs: ['where'],
  DeleteOneCalendarMasterArgs: ['where'],
  FindFirstCalendarMasterArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstCalendarMasterOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyCalendarMasterArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueCalendarMasterArgs: ['where'],
  FindUniqueCalendarMasterOrThrowArgs: ['where'],
  GroupByCalendarMasterArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  UpdateManyCalendarMasterArgs: ['data', 'where'],
  UpdateOneCalendarMasterArgs: ['data', 'where'],
  UpsertOneCalendarMasterArgs: ['where', 'create', 'update'],
  AggregateUserVacationArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneUserVacationArgs: ['data'],
  DeleteManyUserVacationArgs: ['where'],
  DeleteOneUserVacationArgs: ['where'],
  FindFirstUserVacationArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstUserVacationOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyUserVacationArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueUserVacationArgs: ['where'],
  FindUniqueUserVacationOrThrowArgs: ['where'],
  GroupByUserVacationArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyUserVacationArgs: ['data', 'where'],
  UpdateOneUserVacationArgs: ['data', 'where'],
  UpsertOneUserVacationArgs: ['where', 'create', 'update'],
  AggregateHolidayArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneHolidayArgs: ['data'],
  DeleteManyHolidayArgs: ['where'],
  DeleteOneHolidayArgs: ['where'],
  FindFirstHolidayArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstHolidayOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyHolidayArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueHolidayArgs: ['where'],
  FindUniqueHolidayOrThrowArgs: ['where'],
  GroupByHolidayArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyHolidayArgs: ['data', 'where'],
  UpdateOneHolidayArgs: ['data', 'where'],
  UpsertOneHolidayArgs: ['where', 'create', 'update'],
  AggregateTimeSheetArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneTimeSheetArgs: ['data'],
  DeleteManyTimeSheetArgs: ['where'],
  DeleteOneTimeSheetArgs: ['where'],
  FindFirstTimeSheetArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstTimeSheetOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyTimeSheetArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueTimeSheetArgs: ['where'],
  FindUniqueTimeSheetOrThrowArgs: ['where'],
  GroupByTimeSheetArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyTimeSheetArgs: ['data', 'where'],
  UpdateOneTimeSheetArgs: ['data', 'where'],
  UpsertOneTimeSheetArgs: ['where', 'create', 'update'],
  AggregateLeaveRequestArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  CreateOneLeaveRequestArgs: ['data'],
  DeleteManyLeaveRequestArgs: ['where'],
  DeleteOneLeaveRequestArgs: ['where'],
  FindFirstLeaveRequestArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstLeaveRequestOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyLeaveRequestArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueLeaveRequestArgs: ['where'],
  FindUniqueLeaveRequestOrThrowArgs: ['where'],
  GroupByLeaveRequestArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  UpdateManyLeaveRequestArgs: ['data', 'where'],
  UpdateOneLeaveRequestArgs: ['data', 'where'],
  UpsertOneLeaveRequestArgs: ['where', 'create', 'update'],
  AggregateTimeSheetCalendarArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  CreateOneTimeSheetCalendarArgs: ['data'],
  DeleteManyTimeSheetCalendarArgs: ['where'],
  DeleteOneTimeSheetCalendarArgs: ['where'],
  FindFirstTimeSheetCalendarArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindFirstTimeSheetCalendarOrThrowArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyTimeSheetCalendarArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindUniqueTimeSheetCalendarArgs: ['where'],
  FindUniqueTimeSheetCalendarOrThrowArgs: ['where'],
  GroupByTimeSheetCalendarArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  UpdateManyTimeSheetCalendarArgs: ['data', 'where'],
  UpdateOneTimeSheetCalendarArgs: ['data', 'where'],
  UpsertOneTimeSheetCalendarArgs: ['where', 'create', 'update'],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof (typeof crudResolversMap)[TModel]['prototype'];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<
    ModelResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & {
  _all?: MethodDecorator[];
  _query?: MethodDecorator[];
  _mutation?: MethodDecorator[];
};

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  const mutationOperationPrefixes = [
    'createOne',
    'createMany',
    'deleteOne',
    'updateOne',
    'deleteMany',
    'updateMany',
    'upsertOne',
  ];
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName =
      resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    const allActionsDecorators = resolverActionsConfig._all;
    const resolverActionNames =
      crudResolversInfo[modelName as keyof typeof crudResolversInfo];
    for (const resolverActionName of resolverActionNames) {
      const maybeDecoratorsOrFn = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      const isWriteOperation = mutationOperationPrefixes.some((prefix) =>
        resolverActionName.startsWith(prefix),
      );
      const operationKindDecorators = isWriteOperation
        ? resolverActionsConfig._mutation
        : resolverActionsConfig._query;
      const mainDecorators = [
        ...(allActionsDecorators ?? []),
        ...(operationKindDecorators ?? []),
      ];
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === 'function') {
        decorators = maybeDecoratorsOrFn(mainDecorators);
      } else {
        decorators = [...mainDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function
      ).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof (typeof argsTypes)[TArgsType]['prototype'],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<
  ArgFieldNames<TArgsType>
>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName =
      argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  PostUser: relationResolvers.PostUserRelationsResolver,
  Account: relationResolvers.AccountRelationsResolver,
  Session: relationResolvers.SessionRelationsResolver,
  User: relationResolvers.UserRelationsResolver,
  Staff: relationResolvers.StaffRelationsResolver,
  Post: relationResolvers.PostRelationsResolver,
  TimeSheet: relationResolvers.TimeSheetRelationsResolver,
  LeaveRequest: relationResolvers.LeaveRequestRelationsResolver,
  TimeSheetCalendar: relationResolvers.TimeSheetCalendarRelationsResolver,
};
const relationResolversInfo = {
  PostUser: ['posts'],
  Account: ['user'],
  Session: ['user'],
  User: ['accounts', 'sessions', 'staff'],
  Staff: ['user', 'leaveRequests'],
  Post: ['author'],
  TimeSheet: ['calendar'],
  LeaveRequest: ['staff'],
  TimeSheetCalendar: ['timesheet'],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof (typeof relationResolversMap)[TModel]['prototype'];

export type RelationResolverActionsConfig<
  TModel extends RelationResolverModelNames,
> = Partial<
  Record<
    RelationResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & { _all?: MethodDecorator[] };

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(
    relationResolversEnhanceMap,
  )) {
    const modelName =
      relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig =
      relationResolversEnhanceMap[modelName]!;
    const allActionsDecorators = relationResolverActionsConfig._all ?? [];
    const relationResolverActionNames =
      relationResolversInfo[modelName as keyof typeof relationResolversInfo];
    for (const relationResolverActionName of relationResolverActionNames) {
      const maybeDecoratorsOrFn = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === 'function') {
        decorators = maybeDecoratorsOrFn(allActionsDecorators);
      } else {
        decorators = [...allActionsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(
        decorators,
        relationResolverTarget,
        relationResolverActionName,
        null,
      );
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

export type PropertyDecoratorOverrideFn = (
  decorators: PropertyDecorator[],
) => PropertyDecorator[];

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys, PropertyDecorator[] | PropertyDecoratorOverrideFn>
> & { _all?: PropertyDecorator[] };

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object,
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[],
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    const allFieldsDecorators = enhanceConfig.fields._all ?? [];
    for (const typeFieldName of typeFieldNames) {
      const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName] as
        | PropertyDecorator[]
        | PropertyDecoratorOverrideFn
        | undefined;
      let decorators: PropertyDecorator[];
      if (typeof maybeDecoratorsOrFn === 'function') {
        decorators = maybeDecoratorsOrFn(allFieldsDecorators);
      } else {
        decorators = [...allFieldsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  PostUser: ['id', 'email', 'name'],
  Account: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  Session: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  User: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequest: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  Staff: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  Post: ['id', 'title', 'content', 'published', 'authorId'],
  CalendarMaster: ['CalendarDate', 'WeekDayName', 'Year', 'Month'],
  UserVacation: ['VacationDate', 'ChargeableDay'],
  Holiday: ['StartDate', 'EndDate', 'Summary'],
  TimeSheet: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  LeaveRequest: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  TimeSheetCalendar: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof (typeof models)[TModel]['prototype'],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregatePostUser: ['_count', '_avg', '_sum', '_min', '_max'],
  PostUserGroupBy: [
    'id',
    'email',
    'name',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateAccount: ['_count', '_min', '_max'],
  AccountGroupBy: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateSession: ['_count', '_min', '_max'],
  SessionGroupBy: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateUser: ['_count', '_min', '_max'],
  UserGroupBy: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateVerificationRequest: ['_count', '_min', '_max'],
  VerificationRequestGroupBy: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateStaff: ['_count', '_avg', '_sum', '_min', '_max'],
  StaffGroupBy: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregatePost: ['_count', '_avg', '_sum', '_min', '_max'],
  PostGroupBy: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateCalendarMaster: ['_count', '_avg', '_sum', '_min', '_max'],
  CalendarMasterGroupBy: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateUserVacation: ['_count', '_avg', '_sum', '_min', '_max'],
  UserVacationGroupBy: [
    'VacationDate',
    'ChargeableDay',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateHoliday: ['_count', '_min', '_max'],
  HolidayGroupBy: ['StartDate', 'EndDate', 'Summary', '_count', '_min', '_max'],
  AggregateTimeSheet: ['_count', '_avg', '_sum', '_min', '_max'],
  TimeSheetGroupBy: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateLeaveRequest: ['_count', '_avg', '_sum', '_min', '_max'],
  LeaveRequestGroupBy: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateTimeSheetCalendar: ['_count', '_avg', '_sum', '_min', '_max'],
  TimeSheetCalendarGroupBy: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AffectedRowsOutput: ['count'],
  PostUserCount: ['posts'],
  PostUserCountAggregate: ['id', 'email', 'name', '_all'],
  PostUserAvgAggregate: ['id'],
  PostUserSumAggregate: ['id'],
  PostUserMinAggregate: ['id', 'email', 'name'],
  PostUserMaxAggregate: ['id', 'email', 'name'],
  AccountCountAggregate: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  AccountMinAggregate: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  AccountMaxAggregate: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  SessionCountAggregate: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  SessionMinAggregate: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  SessionMaxAggregate: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  UserCount: ['accounts', 'sessions'],
  UserCountAggregate: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  UserMinAggregate: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  UserMaxAggregate: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestCountAggregate: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  VerificationRequestMinAggregate: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestMaxAggregate: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  StaffCount: ['leaveRequests'],
  StaffCountAggregate: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
    '_all',
  ],
  StaffAvgAggregate: ['id'],
  StaffSumAggregate: ['id'],
  StaffMinAggregate: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  StaffMaxAggregate: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  PostCountAggregate: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
    '_all',
  ],
  PostAvgAggregate: ['id', 'authorId'],
  PostSumAggregate: ['id', 'authorId'],
  PostMinAggregate: ['id', 'title', 'content', 'published', 'authorId'],
  PostMaxAggregate: ['id', 'title', 'content', 'published', 'authorId'],
  CalendarMasterCountAggregate: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
    '_all',
  ],
  CalendarMasterAvgAggregate: ['Year', 'Month'],
  CalendarMasterSumAggregate: ['Year', 'Month'],
  CalendarMasterMinAggregate: ['CalendarDate', 'WeekDayName', 'Year', 'Month'],
  CalendarMasterMaxAggregate: ['CalendarDate', 'WeekDayName', 'Year', 'Month'],
  UserVacationCountAggregate: ['VacationDate', 'ChargeableDay', '_all'],
  UserVacationAvgAggregate: ['ChargeableDay'],
  UserVacationSumAggregate: ['ChargeableDay'],
  UserVacationMinAggregate: ['VacationDate', 'ChargeableDay'],
  UserVacationMaxAggregate: ['VacationDate', 'ChargeableDay'],
  HolidayCountAggregate: ['StartDate', 'EndDate', 'Summary', '_all'],
  HolidayMinAggregate: ['StartDate', 'EndDate', 'Summary'],
  HolidayMaxAggregate: ['StartDate', 'EndDate', 'Summary'],
  TimeSheetCount: ['calendar'],
  TimeSheetCountAggregate: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    '_all',
  ],
  TimeSheetAvgAggregate: [
    'id',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetSumAggregate: [
    'id',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetMinAggregate: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetMaxAggregate: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  LeaveRequestCountAggregate: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
    '_all',
  ],
  LeaveRequestAvgAggregate: ['id', 'leaveDays', 'staffId'],
  LeaveRequestSumAggregate: ['id', 'leaveDays', 'staffId'],
  LeaveRequestMinAggregate: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  LeaveRequestMaxAggregate: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  TimeSheetCalendarCountAggregate: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    '_all',
  ],
  TimeSheetCalendarAvgAggregate: [
    'id',
    'DayID',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarSumAggregate: [
    'id',
    'DayID',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarMinAggregate: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarMaxAggregate: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof (typeof outputTypes)[TOutput]['prototype'],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName =
      outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  PostUserWhereInput: ['AND', 'OR', 'NOT', 'id', 'email', 'name', 'posts'],
  PostUserOrderByWithRelationInput: ['id', 'email', 'name', 'posts'],
  PostUserWhereUniqueInput: ['id', 'email'],
  PostUserOrderByWithAggregationInput: [
    'id',
    'email',
    'name',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  PostUserScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'email',
    'name',
  ],
  AccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    'user',
  ],
  AccountOrderByWithRelationInput: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    'user',
  ],
  AccountWhereUniqueInput: ['id', 'providerId_providerAccountId'],
  AccountOrderByWithAggregationInput: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  AccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  SessionWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    'user',
  ],
  SessionOrderByWithRelationInput: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    'user',
  ],
  SessionWhereUniqueInput: ['id', 'sessionToken', 'accessToken'],
  SessionOrderByWithAggregationInput: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  SessionScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  UserWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
    'staff',
  ],
  UserOrderByWithRelationInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
    'staff',
  ],
  UserWhereUniqueInput: ['id', 'username', 'email'],
  UserOrderByWithAggregationInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  UserScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestOrderByWithRelationInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestWhereUniqueInput: ['id', 'token', 'identifier_token'],
  VerificationRequestOrderByWithAggregationInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  VerificationRequestScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  StaffWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
    'user',
    'leaveRequests',
  ],
  StaffOrderByWithRelationInput: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
    'user',
    'leaveRequests',
  ],
  StaffWhereUniqueInput: ['id', 'userId'],
  StaffOrderByWithAggregationInput: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  StaffScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  PostWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'title',
    'content',
    'published',
    'authorId',
    'author',
  ],
  PostOrderByWithRelationInput: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
    'author',
  ],
  PostWhereUniqueInput: ['id'],
  PostOrderByWithAggregationInput: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  PostScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'title',
    'content',
    'published',
    'authorId',
  ],
  CalendarMasterWhereInput: [
    'AND',
    'OR',
    'NOT',
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  CalendarMasterOrderByWithRelationInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  CalendarMasterWhereUniqueInput: ['CalendarDate'],
  CalendarMasterOrderByWithAggregationInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  CalendarMasterScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  UserVacationWhereInput: ['AND', 'OR', 'NOT', 'VacationDate', 'ChargeableDay'],
  UserVacationOrderByWithRelationInput: ['VacationDate', 'ChargeableDay'],
  UserVacationWhereUniqueInput: ['VacationDate'],
  UserVacationOrderByWithAggregationInput: [
    'VacationDate',
    'ChargeableDay',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  UserVacationScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'VacationDate',
    'ChargeableDay',
  ],
  HolidayWhereInput: ['AND', 'OR', 'NOT', 'StartDate', 'EndDate', 'Summary'],
  HolidayOrderByWithRelationInput: ['StartDate', 'EndDate', 'Summary'],
  HolidayWhereUniqueInput: ['StartDate'],
  HolidayOrderByWithAggregationInput: [
    'StartDate',
    'EndDate',
    'Summary',
    '_count',
    '_max',
    '_min',
  ],
  HolidayScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'StartDate',
    'EndDate',
    'Summary',
  ],
  TimeSheetWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    'calendar',
  ],
  TimeSheetOrderByWithRelationInput: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    'calendar',
  ],
  TimeSheetWhereUniqueInput: ['id'],
  TimeSheetOrderByWithAggregationInput: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  TimeSheetScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  LeaveRequestWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
    'staff',
  ],
  LeaveRequestOrderByWithRelationInput: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
    'staff',
  ],
  LeaveRequestWhereUniqueInput: ['id'],
  LeaveRequestOrderByWithAggregationInput: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  LeaveRequestScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  TimeSheetCalendarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    'timesheet',
  ],
  TimeSheetCalendarOrderByWithRelationInput: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    'timesheet',
  ],
  TimeSheetCalendarWhereUniqueInput: ['id'],
  TimeSheetCalendarOrderByWithAggregationInput: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  TimeSheetCalendarScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  PostUserCreateInput: ['email', 'name', 'posts'],
  PostUserUpdateInput: ['email', 'name', 'posts'],
  PostUserUpdateManyMutationInput: ['email', 'name'],
  AccountCreateInput: [
    'id',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    'user',
  ],
  AccountUpdateInput: [
    'id',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
    'user',
  ],
  AccountUpdateManyMutationInput: [
    'id',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  SessionCreateInput: [
    'id',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    'user',
  ],
  SessionUpdateInput: [
    'id',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
    'user',
  ],
  SessionUpdateManyMutationInput: [
    'id',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  UserCreateInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
    'staff',
  ],
  UserUpdateInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
    'staff',
  ],
  UserUpdateManyMutationInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestCreateInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestUpdateInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestUpdateManyMutationInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  StaffCreateInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'user',
    'leaveRequests',
  ],
  StaffUpdateInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'user',
    'leaveRequests',
  ],
  StaffUpdateManyMutationInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
  ],
  PostCreateInput: ['title', 'content', 'published', 'author'],
  PostUpdateInput: ['title', 'content', 'published', 'author'],
  PostUpdateManyMutationInput: ['title', 'content', 'published'],
  CalendarMasterCreateInput: ['CalendarDate', 'WeekDayName', 'Year', 'Month'],
  CalendarMasterUpdateInput: ['CalendarDate', 'WeekDayName', 'Year', 'Month'],
  CalendarMasterUpdateManyMutationInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  UserVacationCreateInput: ['VacationDate', 'ChargeableDay'],
  UserVacationUpdateInput: ['VacationDate', 'ChargeableDay'],
  UserVacationUpdateManyMutationInput: ['VacationDate', 'ChargeableDay'],
  HolidayCreateInput: ['StartDate', 'EndDate', 'Summary'],
  HolidayUpdateInput: ['StartDate', 'EndDate', 'Summary'],
  HolidayUpdateManyMutationInput: ['StartDate', 'EndDate', 'Summary'],
  TimeSheetCreateInput: [
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    'calendar',
  ],
  TimeSheetUpdateInput: [
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
    'calendar',
  ],
  TimeSheetUpdateManyMutationInput: [
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  LeaveRequestCreateInput: [
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staff',
  ],
  LeaveRequestUpdateInput: [
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staff',
  ],
  LeaveRequestUpdateManyMutationInput: [
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
  ],
  TimeSheetCalendarCreateInput: [
    'DayID',
    'CalendarDate',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    'timesheet',
  ],
  TimeSheetCalendarUpdateInput: [
    'DayID',
    'CalendarDate',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
    'timesheet',
  ],
  TimeSheetCalendarUpdateManyMutationInput: [
    'DayID',
    'CalendarDate',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  IntFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  StringFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
  ],
  StringNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
  ],
  PostListRelationFilter: ['every', 'some', 'none'],
  PostOrderByRelationAggregateInput: ['_count'],
  PostUserCountOrderByAggregateInput: ['id', 'email', 'name'],
  PostUserAvgOrderByAggregateInput: ['id'],
  PostUserMaxOrderByAggregateInput: ['id', 'email', 'name'],
  PostUserMinOrderByAggregateInput: ['id', 'email', 'name'],
  PostUserSumOrderByAggregateInput: ['id'],
  IntWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  StringWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  StringNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  DateTimeNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  DateTimeFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  UserRelationFilter: ['is', 'isNot'],
  AccountProviderIdProviderAccountIdCompoundUniqueInput: [
    'providerId',
    'providerAccountId',
  ],
  AccountCountOrderByAggregateInput: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  AccountMaxOrderByAggregateInput: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  AccountMinOrderByAggregateInput: [
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  DateTimeNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  DateTimeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  SessionCountOrderByAggregateInput: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  SessionMaxOrderByAggregateInput: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  SessionMinOrderByAggregateInput: [
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  AccountListRelationFilter: ['every', 'some', 'none'],
  SessionListRelationFilter: ['every', 'some', 'none'],
  StaffRelationFilter: ['is', 'isNot'],
  AccountOrderByRelationAggregateInput: ['_count'],
  SessionOrderByRelationAggregateInput: ['_count'],
  UserCountOrderByAggregateInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  UserMaxOrderByAggregateInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  UserMinOrderByAggregateInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestIdentifierTokenCompoundUniqueInput: [
    'identifier',
    'token',
  ],
  VerificationRequestCountOrderByAggregateInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestMaxOrderByAggregateInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  VerificationRequestMinOrderByAggregateInput: [
    'id',
    'identifier',
    'token',
    'expires',
    'createdAt',
    'updatedAt',
  ],
  LeaveRequestListRelationFilter: ['every', 'some', 'none'],
  LeaveRequestOrderByRelationAggregateInput: ['_count'],
  StaffCountOrderByAggregateInput: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  StaffAvgOrderByAggregateInput: ['id'],
  StaffMaxOrderByAggregateInput: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  StaffMinOrderByAggregateInput: [
    'id',
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'userId',
  ],
  StaffSumOrderByAggregateInput: ['id'],
  BoolFilter: ['equals', 'not'],
  PostUserRelationFilter: ['is', 'isNot'],
  PostCountOrderByAggregateInput: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
  ],
  PostAvgOrderByAggregateInput: ['id', 'authorId'],
  PostMaxOrderByAggregateInput: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
  ],
  PostMinOrderByAggregateInput: [
    'id',
    'title',
    'content',
    'published',
    'authorId',
  ],
  PostSumOrderByAggregateInput: ['id', 'authorId'],
  BoolWithAggregatesFilter: ['equals', 'not', '_count', '_min', '_max'],
  CalendarMasterCountOrderByAggregateInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  CalendarMasterAvgOrderByAggregateInput: ['Year', 'Month'],
  CalendarMasterMaxOrderByAggregateInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  CalendarMasterMinOrderByAggregateInput: [
    'CalendarDate',
    'WeekDayName',
    'Year',
    'Month',
  ],
  CalendarMasterSumOrderByAggregateInput: ['Year', 'Month'],
  DecimalFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  UserVacationCountOrderByAggregateInput: ['VacationDate', 'ChargeableDay'],
  UserVacationAvgOrderByAggregateInput: ['ChargeableDay'],
  UserVacationMaxOrderByAggregateInput: ['VacationDate', 'ChargeableDay'],
  UserVacationMinOrderByAggregateInput: ['VacationDate', 'ChargeableDay'],
  UserVacationSumOrderByAggregateInput: ['ChargeableDay'],
  DecimalWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  HolidayCountOrderByAggregateInput: ['StartDate', 'EndDate', 'Summary'],
  HolidayMaxOrderByAggregateInput: ['StartDate', 'EndDate', 'Summary'],
  HolidayMinOrderByAggregateInput: ['StartDate', 'EndDate', 'Summary'],
  TimeSheetCalendarListRelationFilter: ['every', 'some', 'none'],
  TimeSheetCalendarOrderByRelationAggregateInput: ['_count'],
  TimeSheetCountOrderByAggregateInput: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetAvgOrderByAggregateInput: [
    'id',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetMaxOrderByAggregateInput: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetMinOrderByAggregateInput: [
    'id',
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetSumOrderByAggregateInput: [
    'id',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  FloatFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  LeaveRequestCountOrderByAggregateInput: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  LeaveRequestAvgOrderByAggregateInput: ['id', 'leaveDays', 'staffId'],
  LeaveRequestMaxOrderByAggregateInput: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  LeaveRequestMinOrderByAggregateInput: [
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  LeaveRequestSumOrderByAggregateInput: ['id', 'leaveDays', 'staffId'],
  FloatWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  TimeSheetRelationFilter: ['is', 'isNot'],
  TimeSheetCalendarCountOrderByAggregateInput: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarAvgOrderByAggregateInput: [
    'id',
    'DayID',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarMaxOrderByAggregateInput: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarMinOrderByAggregateInput: [
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarSumOrderByAggregateInput: [
    'id',
    'DayID',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  PostCreateNestedManyWithoutAuthorInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  StringFieldUpdateOperationsInput: ['set'],
  NullableStringFieldUpdateOperationsInput: ['set'],
  PostUpdateManyWithoutAuthorNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'set',
    'disconnect',
    'delete',
    'connect',
    'update',
    'updateMany',
    'deleteMany',
  ],
  IntFieldUpdateOperationsInput: [
    'set',
    'increment',
    'decrement',
    'multiply',
    'divide',
  ],
  UserCreateNestedOneWithoutAccountsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  NullableDateTimeFieldUpdateOperationsInput: ['set'],
  DateTimeFieldUpdateOperationsInput: ['set'],
  UserUpdateOneRequiredWithoutAccountsNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  UserCreateNestedOneWithoutSessionsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  UserUpdateOneRequiredWithoutSessionsNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedManyWithoutUserInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  SessionCreateNestedManyWithoutUserInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  StaffCreateNestedOneWithoutUserInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateManyWithoutUserNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'set',
    'disconnect',
    'delete',
    'connect',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SessionUpdateManyWithoutUserNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'set',
    'disconnect',
    'delete',
    'connect',
    'update',
    'updateMany',
    'deleteMany',
  ],
  StaffUpdateOneWithoutUserNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'disconnect',
    'delete',
    'connect',
    'update',
  ],
  UserCreateNestedOneWithoutStaffInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  LeaveRequestCreateNestedManyWithoutStaffInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  UserUpdateOneWithoutStaffNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'disconnect',
    'delete',
    'connect',
    'update',
  ],
  LeaveRequestUpdateManyWithoutStaffNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'set',
    'disconnect',
    'delete',
    'connect',
    'update',
    'updateMany',
    'deleteMany',
  ],
  PostUserCreateNestedOneWithoutPostsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  BoolFieldUpdateOperationsInput: ['set'],
  PostUserUpdateOneRequiredWithoutPostsNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  DecimalFieldUpdateOperationsInput: [
    'set',
    'increment',
    'decrement',
    'multiply',
    'divide',
  ],
  TimeSheetCalendarCreateNestedManyWithoutTimesheetInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  TimeSheetCalendarUpdateManyWithoutTimesheetNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'set',
    'disconnect',
    'delete',
    'connect',
    'update',
    'updateMany',
    'deleteMany',
  ],
  StaffCreateNestedOneWithoutLeaveRequestsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  FloatFieldUpdateOperationsInput: [
    'set',
    'increment',
    'decrement',
    'multiply',
    'divide',
  ],
  StaffUpdateOneRequiredWithoutLeaveRequestsNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  TimeSheetCreateNestedOneWithoutCalendarInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  TimeSheetUpdateOneRequiredWithoutCalendarNestedInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  NestedIntFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  NestedStringFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
  ],
  NestedStringNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
  ],
  NestedIntWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  NestedFloatFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  NestedStringWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedStringNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedIntNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedDateTimeNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedDateTimeFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedDateTimeNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedDateTimeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedBoolFilter: ['equals', 'not'],
  NestedBoolWithAggregatesFilter: ['equals', 'not', '_count', '_min', '_max'],
  NestedDecimalFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedDecimalWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  NestedFloatWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  PostCreateWithoutAuthorInput: ['title', 'content', 'published'],
  PostCreateOrConnectWithoutAuthorInput: ['where', 'create'],
  PostUpsertWithWhereUniqueWithoutAuthorInput: ['where', 'update', 'create'],
  PostUpdateWithWhereUniqueWithoutAuthorInput: ['where', 'data'],
  PostUpdateManyWithWhereWithoutAuthorInput: ['where', 'data'],
  PostScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'title',
    'content',
    'published',
    'authorId',
  ],
  UserCreateWithoutAccountsInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'sessions',
    'staff',
  ],
  UserCreateOrConnectWithoutAccountsInput: ['where', 'create'],
  UserUpsertWithoutAccountsInput: ['update', 'create'],
  UserUpdateWithoutAccountsInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'sessions',
    'staff',
  ],
  UserCreateWithoutSessionsInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'staff',
  ],
  UserCreateOrConnectWithoutSessionsInput: ['where', 'create'],
  UserUpsertWithoutSessionsInput: ['update', 'create'],
  UserUpdateWithoutSessionsInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'staff',
  ],
  AccountCreateWithoutUserInput: [
    'id',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  AccountCreateOrConnectWithoutUserInput: ['where', 'create'],
  SessionCreateWithoutUserInput: [
    'id',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  SessionCreateOrConnectWithoutUserInput: ['where', 'create'],
  StaffCreateWithoutUserInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'leaveRequests',
  ],
  StaffCreateOrConnectWithoutUserInput: ['where', 'create'],
  AccountUpsertWithWhereUniqueWithoutUserInput: ['where', 'update', 'create'],
  AccountUpdateWithWhereUniqueWithoutUserInput: ['where', 'data'],
  AccountUpdateManyWithWhereWithoutUserInput: ['where', 'data'],
  AccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  SessionUpsertWithWhereUniqueWithoutUserInput: ['where', 'update', 'create'],
  SessionUpdateWithWhereUniqueWithoutUserInput: ['where', 'data'],
  SessionUpdateManyWithWhereWithoutUserInput: ['where', 'data'],
  SessionScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'userId',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  StaffUpsertWithoutUserInput: ['update', 'create'],
  StaffUpdateWithoutUserInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'leaveRequests',
  ],
  UserCreateWithoutStaffInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
  ],
  UserCreateOrConnectWithoutStaffInput: ['where', 'create'],
  LeaveRequestCreateWithoutStaffInput: [
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
  ],
  LeaveRequestCreateOrConnectWithoutStaffInput: ['where', 'create'],
  UserUpsertWithoutStaffInput: ['update', 'create'],
  UserUpdateWithoutStaffInput: [
    'id',
    'username',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'createdAt',
    'updatedAt',
    'accounts',
    'sessions',
  ],
  LeaveRequestUpsertWithWhereUniqueWithoutStaffInput: [
    'where',
    'update',
    'create',
  ],
  LeaveRequestUpdateWithWhereUniqueWithoutStaffInput: ['where', 'data'],
  LeaveRequestUpdateManyWithWhereWithoutStaffInput: ['where', 'data'],
  LeaveRequestScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
    'staffId',
  ],
  PostUserCreateWithoutPostsInput: ['email', 'name'],
  PostUserCreateOrConnectWithoutPostsInput: ['where', 'create'],
  PostUserUpsertWithoutPostsInput: ['update', 'create'],
  PostUserUpdateWithoutPostsInput: ['email', 'name'],
  TimeSheetCalendarCreateWithoutTimesheetInput: [
    'DayID',
    'CalendarDate',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  TimeSheetCalendarCreateOrConnectWithoutTimesheetInput: ['where', 'create'],
  TimeSheetCalendarUpsertWithWhereUniqueWithoutTimesheetInput: [
    'where',
    'update',
    'create',
  ],
  TimeSheetCalendarUpdateWithWhereUniqueWithoutTimesheetInput: [
    'where',
    'data',
  ],
  TimeSheetCalendarUpdateManyWithWhereWithoutTimesheetInput: ['where', 'data'],
  TimeSheetCalendarScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'DayID',
    'CalendarDate',
    'TimeSheetID',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
  StaffCreateWithoutLeaveRequestsInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'user',
  ],
  StaffCreateOrConnectWithoutLeaveRequestsInput: ['where', 'create'],
  StaffUpsertWithoutLeaveRequestsInput: ['update', 'create'],
  StaffUpdateWithoutLeaveRequestsInput: [
    'StaffName',
    'AgentName',
    'StaffCategory',
    'Department',
    'PostUnit',
    'ManagerName',
    'ManagerTitle',
    'ManagerEmail',
    'user',
  ],
  TimeSheetCreateWithoutCalendarInput: [
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  TimeSheetCreateOrConnectWithoutCalendarInput: ['where', 'create'],
  TimeSheetUpsertWithoutCalendarInput: ['update', 'create'],
  TimeSheetUpdateWithoutCalendarInput: [
    'StartDate',
    'EndDate',
    'TSCalendarID',
    'TotalChargeableDay',
    'TotalChargeableHour',
    'TotalOTHour',
  ],
  PostUpdateWithoutAuthorInput: ['title', 'content', 'published'],
  AccountUpdateWithoutUserInput: [
    'id',
    'providerType',
    'providerId',
    'providerAccountId',
    'refreshToken',
    'accessToken',
    'accessTokenExpires',
    'createdAt',
    'updatedAt',
  ],
  SessionUpdateWithoutUserInput: [
    'id',
    'expires',
    'sessionToken',
    'accessToken',
    'createdAt',
    'updatedAt',
  ],
  LeaveRequestUpdateWithoutStaffInput: [
    'leavePeriodStart',
    'AMPMStart',
    'leavePeriodEnd',
    'AMPMEnd',
    'leaveDays',
    'dateOfReturn',
    'staffSignDate',
  ],
  TimeSheetCalendarUpdateWithoutTimesheetInput: [
    'DayID',
    'CalendarDate',
    'ChargeableDay',
    'ChargeableHour',
    'Traing',
    'Vacation',
    'PublicHoliday',
    'WeekEnd',
    'Others',
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof (typeof inputTypes)[TInput]['prototype'],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName =
      inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}
